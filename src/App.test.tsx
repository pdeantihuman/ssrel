import axios from 'axios'
import Base64 from 'urlsafe-base64'

function encode(str) {
    return Base64.encode(Buffer.from(str, 'utf-8'))
}

function decode(str: string): string {
    return Base64.decode(str).toString('utf-8')
}

function generateID(): string {
    const seed = 'ABCDEF01234567890'
    const arr = new Array<String>();
    for (let i = 0; i < 32; i++) {
        arr.push(seed[Math.floor(Math.random() * seed.length)])
    }
    return arr.join('')
}

function parseSubscription(code: string): { isValid: boolean; optional: any; required: string[] } {
    let ssrLinks = decode(code);
    const lines = ssrLinks.split("\n");
    const ssrLink = lines[4]
    const body = ssrLink.substr(6)
    const decoded = decode(body)
    const _split = decoded.split("/?")
    const required = _split[0]
    const others = _split[1]
    const requiredSplit = required.split(':')
    if (requiredSplit.length !== 6) {
        console.log('fatal: parse failed')
        return {
            isValid: false,
            required: new Array<string>(),
            optional: null
        }
    }
    requiredSplit[5] = decode(requiredSplit[5])
    console.log(requiredSplit)
    const otherSplit = {}
    others && others.split('&').forEach(item => {
        const _params = item.split('=')
        otherSplit[_params[0]] = decode(_params[1])
    })
    return {
        isValid: true,
        required: requiredSplit,
        optional: otherSplit
    }
}

// ssr://
function isSSRLinkValid(link: string): boolean[] | (boolean | string[] | {})[] {
    try {
        //
        const body = link.substring(6)
        const decoded = decode(body)
        const _split = decoded.split('/?')
        const required = _split[0]
        const others = _split[1]
        const requiredSplit = required.split(':')
        if (requiredSplit.length !== 6) {
            return [false]
        }
        const otherSplit = {}
        others && others.split('&').forEach(item => {
            const _params = item.split('=')
            otherSplit[_params[0]] = _params[1]
        })
        return [true, requiredSplit, otherSplit]
    } catch (e) {
        return [false]
    }
}

class Config {
    private server;
    private server_port;
    private password: string;
    private protocolparam: string;
    private obfs: string;
    private method: string;
    private protocol: string;
    private obfsparam: string;
    private enable: boolean;
    private remarks: string;
    private group: string;
    private id: string;

    constructor(config) {
        this.server = '127.0.0.1'
        this.server_port = 8388
        this.password = '0'
        this.method = 'aes-256-cfb'
        this.protocol = 'origin'
        this.protocolparam = ''
        this.obfs = 'plain'
        this.obfsparam = ''
        this.remarks = ''
        this.group = ''
        this.id = generateID()
        this.enable = true
        Object.defineProperty(this, 'remarks_base64', {
            enumerable: true,
            get() {
                return this.remarks ? encode(this.remarks) : ''
            },
            set() {
            }
        })
    }


}

test('test parse ssr subscription api', async () => {
    // const resp = await axios.get("https://www.kiwiss.cc/link/1p7FJThsG3EiCDWp")
    const data = ""
    parseSubscription(data)

    // expect(resp.data).toBe("")
    // resp.data
})